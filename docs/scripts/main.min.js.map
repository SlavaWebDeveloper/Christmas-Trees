{"version":3,"sources":["garland/garland.js","scripts/burger.js","scripts/modal.js","scripts/timer.js","snow/snow.js"],"names":["garlandInit","document","createElement","elka","garland","classList","add","garlandClasses","className","head","append","style","body","textContent","currentIndex","setInterval","prevIndex","Math","round","random","length","concat","burger","querySelector","navigation","addEventListener","toggle","buttonsOrder","querySelectorAll","buttonConsultation","overlayConsultation","overlayOrder","dataset","consultation","event","target","closest","forEach","buttonOrder","order","remove","declOfNum","n","titles","from","timers","timer","timerText","timerCount","prepend","startTimer","timeRemaining","Date","seconds","floor","minutes","hours","days","s","m","h","d","setTimeout","getRandomIntInclusive","min","max","createSnow","saturation","snowItem","time","cssText"],"mappings":"aAMA,IAAAA,YAAA,WAEA,IAAMA,EAAWC,SAAGC,cAAH,OAAS,EAKlBC,EAAOF,SAASC,cAAc,KAAK,EAInCE,GALND,EAAAE,UAAAC,IAAA,cAAA,EAKgBL,SAASC,cAAc,KAAK,GAoEtCK,GArENH,EAAAI,UAAA,oBAKAP,SAASQ,KAAKC,OAAOC,CAAK,EAD1BV,SAAAW,KAAAF,OAAAP,EAAAC,CAAA,EAKAO,EAAME,YAAW,ojCA4DM,CACrB,YACA,YACA,YACA,cAIEC,EAAe,EAGnBC,YAAY,WAIV,IAHA,IAAOC,EAAYF,EAGZE,IAAcF,GACnBA,EAAeG,KAAKC,MAAMD,KAAKE,OAAO,GAAKZ,EAAea,OAAS,EAAE,EAIvEhB,EAAQI,UAAS,WAAAa,OAAcd,EAAeO,EAAa,CAC7D,EAAG,GAAG,CACR,EAGAd,YAAY;aC9GZ,IAAMsB,OAASrB,SAASsB,cAAc,SAAS,EACzCC,WAAavB,SAASsB,cAAc,aAAa,EAAvDD,OAAME,iBAAavB,QAASsB,WAE5BD,OAAOG,UAAAA,OAAiB,eAAS,EAC/BH,WAAOjB,UAAUqB,OAAO,eAAgB,CAE1C,CAAC;aCKD,IAAMC,aAAe1B,SAAS2B,iBAAiB,yBAAyB,EADxEC,mBAAA5B,SAAAsB,cAAA,uBAAA,EACMI,oBAAwBC,SAAAA,cAAiB,uBAA0B,EACnEC,aAAAA,SAAqB5B,cAASsB,gBAAc,EAC5CO,MAAAA,SAAmBP,cAAYA,eAAc,EAC7CQ,aAAe9B,SAASsB,cAAc,sBAAiB,EAM7DM,mBAAAJ,iBAAA,QAAA,WACAK,oBAAAzB,UAAAC,IAAA,gBAAA,EACAuB,aAAAA,MAAmBJ,mBAAwBO,QAAEC,YAG7C,CAAC,EAMDH,oBAAAL,iBAAA,QAAA,SAAAS,GACAC,EAAAD,EAAAC,OAEQA,IAAUD,qBAAYC,CAAAA,EAAAC,QAAA,eAAA,GAE5BN,oBAAeA,UAAAA,OAAuBK,gBAAe,CAGvD,CAAC,EAKDR,aAAAU,QAAA,SAAAC,GACAX,EAAaU,iBAAQC,QAAAA,WACnBA,aAAYb,UAAAA,IAAiB,gBAAS,EACpCM,MAAAA,MAAa1B,EAAa2B,QAACO,KAE7B,CAAC,CACH,CAAC,EAODR,aAAAN,iBAAA,QAAA,SAAAS,GACAH,EAAaN,EAAAA,OAGPU,IAAWJ,cAAgBI,CAAAA,EAAOC,QAAQ,eAAe,GAC3DL,aAAa1B,UAAUmC,OAAO,gBAAgB,CAElD,CAAC;aCxDD,IAAAC,UAAA,SAAAC,EAAAC,EAAAC,GAAA,OAAAF,EAAA,IAAAC,EAAAC,EAAAF,EAAA,IAAA,GAAAA,EAAA,KAAA,GACA,EAAMD,EAAAA,EAAS,IAAG,GAAZA,EAAAA,KAAgBE,GAAAA,EAAkB,GAAND,EAAA,IAAYA,EAAGC,IAAOC,IAAOF,EAAI,IAAE,IAAiB,IAAPA,EAAI,KACjF,EAAI,EAAC,EAKPG,OAAA,WAIE,IAAMC,EAAQ7C,SAASC,cAAc,KAAM,EACrC6C,EAAY9C,SAASC,cAAc,GAAI,EACvC8C,EAAa/C,SAASC,cAAc,MAAO,EAGjD4C,EAAMzC,UAAUC,IAAI,OAAO,EAC3ByC,EAAU1C,UAAUC,IAAI,aAAa,EACrC0C,EAAW3C,UAAUC,IAAI,cAAc,EAGvCyC,EAAUlC,YAAc,gCACxBmC,EAAWnC,YAAc,mCAGzBkC,EAAUrC,OAAOsC,CAAU,EAC3BF,EAAMpC,OAAOqC,CAAS,EACtB9C,SAASW,KAAKqC,QAAQH,CAAK,EAKR,SAAbI,IACJ,IAEMC,GAFW,IAAIC,KAAK,KAAO,EAAG,EAAG,EAAG,EAAI,CAAA,EAClC,IAAIA,MACyB,IAGnCC,EAAUpC,KAAKqC,MAAMH,EAAkB,EAAC,EACxCI,EAAUtC,KAAKqC,MAAMH,EAAkB,GAAK,EAAC,EAC7CK,EAAQvC,KAAKqC,MAAMH,EAAkB,GAAK,GAAK,EAAC,EAChDM,EAAOxC,KAAKqC,MAAMH,EAAkB,GAAK,GAAK,EAAC,EAG9CO,EAAGjB,UAAUY,EAAU,CAAA,UAAW,UAAW,SAAU,EACvDM,EAAGlB,UAAUc,EAAU,CAAA,SAAU,SAAU,QAAS,EACpDK,EAAGnB,UAAUe,EAAQ,CAAA,MAAO,OAAQ,QAAS,EAC7CK,EAAGpB,UAAUgB,EAAO,CAAA,OAAQ,MAAO,OAAQ,EAGlDT,EAAWnC,YAAW,GAAAQ,OAAAA,EAAAA,GAAAA,EAAAA,OAAAA,EAAA,GAAA,EAAAA,OAAOsC,EAAA,GAAA,EAAAtC,OAAAA,CAAAA,EAGT,EAAhB8B,EACFW,WAAWZ,EAAY,GAAI,EAE3BJ,EAAMN,OAAO,CAEjB,EAGW,CACb,EAGAK,OAAO;aCrEP,IAAAkB,sBAAA,SAAArB,EAAAiB,GACA,IAAAK,EAAA/C,KAAA+C,IAAAtB,EAAAiB,CAAA,EACMI,EAAAA,KAAAA,IAAAA,EAAqBJ,CAAA,EACzB,OAAS1C,KAAGA,MAAQA,KAAKE,OAAC,GAAA8C,EAAAD,EAAA,GAAAA,CAAA,CAG5B,EAMAE,WAAA,SAAAF,EAAAC,EAAAE,GACA,IAAAxD,EAAAV,SAAAC,cAAA,OAAA,EACAD,SAAMiE,KAAUxD,OAAGC,CAAbuD,EAEJjE,EAAAA,YAAcS,+aAuDdK,YAGF,WACAmD,IAAUE,EAAYnE,SAAAC,cAAA,KAAA,EAvBZmE,GAFND,EAAS/D,UAAUC,IAAI,MAAM,EAEhByD,sBAAsBC,EAAKC,CAAG,GAG3CG,EAASzD,MAAM2D,QAAO,iBAAAjD,OACZ0C,sBAAsB,EAAG,GAAG,EAAC,mDAAA,EAAA1C,OACI0C,sBAAsB,EAdrD,CAc6D,EAAC,qCAAA,EAAA1C,OAClDgD,EAAI,UAAA,EAI5BpE,SAASW,KAAKF,OAAO0D,CAAQ,EAG7BN,WAAW,WACTM,EAAS5B,OAAO,CAClB,EAAU,IAAP6B,CAAW,CAChB,EAG4BF,CAAU,CACxC,EAGAD,WAAW,EAAG,GAAI,GAAG","file":"main.min.js","sourcesContent":["/**\r\n * Инициализация гирлянды\r\n * Этот скрипт динамически создает и анимирует эффект гирлянды на веб-странице\r\n */\r\n\r\n/**\r\n * Функция для инициализации гирлянды\r\n */\r\nconst garlandInit = () => {\r\n  // Создаем элемент <style> для динамического добавления стилей CSS\r\n  const style = document.createElement('style');\r\n\r\n  // Создаем элемент <div> для фонового изображения гирлянды\r\n  const elka = document.createElement('div');\r\n  elka.classList.add('garland-elka');\r\n\r\n  // Создаем элемент <div> для анимации гирлянды\r\n  const garland = document.createElement('div');\r\n  garland.className = 'garland garland_1';\r\n\r\n  // Добавляем элементы <style>, <div class=\"garland-elka\"> и <div class=\"garland\"> в DOM\r\n  document.head.append(style);\r\n  document.body.append(elka, garland);\r\n\r\n  // Устанавливаем начальные CSS-стили для фона гирлянды\r\n  style.textContent = `\r\n    :root {\r\n      --garland-bg-size: 200px;\r\n    }\r\n\r\n    body {\r\n      position: relative;\r\n    }\r\n    \r\n    .garland-elka {\r\n      position: fixed;\r\n      inset: 0;\r\n      background-size: var(--garland-bg-size);\r\n      background-image: url('./garland/elka-bg.png');\r\n      background-repeat: no-repeat;\r\n      pointer-events: none;\r\n      z-index: 399;\r\n    }\r\n\r\n    .garland {\r\n      position: fixed;\r\n      top: 0;\r\n      left: 0;\r\n      right: 0;\r\n      height: 36px;\r\n      background-image: url('./garland/garland-bg.png');\r\n      pointer-events: none;\r\n      z-index: 300;\r\n    }\r\n\r\n    .garland_1 {\r\n      background-position: 0 0;\r\n    }\r\n    \r\n    .garland_2 {\r\n      background-position: 0 -36px;\r\n    }\r\n\r\n    .garland_3 {\r\n      background-position: 0 -72px;\r\n    }\r\n\r\n    .garland_4 {\r\n      background-position: 0 -108px;\r\n    }\r\n\r\n    @media (max-width: 1600px) {\r\n      .garland-elka {\r\n        --garland-bg-size: 100px;\r\n      }\r\n    }\r\n\r\n    @media (max-width: 500px) {\r\n      .garland-elka {\r\n        --garland-bg-size: 80px;\r\n      }\r\n    }  \r\n  `;\r\n\r\n  // Массив классов для разных анимаций гирлянды\r\n  const garlandClasses = [\r\n    'garland_1',\r\n    'garland_2',\r\n    'garland_3',\r\n    'garland_4'\r\n  ];\r\n\r\n  // Переменная для отслеживания текущего индекса анимации гирлянды\r\n  let currentIndex = 0;\r\n  \r\n  // Устанавливаем интервал для изменения класса анимации гирлянды каждые 300 миллисекунд\r\n  setInterval(() => {\r\n    const  prevIndex = currentIndex;\r\n\r\n    // Убеждаемся, что новый индекс отличается от предыдущего\r\n    while (prevIndex === currentIndex) {\r\n      currentIndex = Math.round(Math.random() * (garlandClasses.length - 1));\r\n    }\r\n    \r\n    // Обновляем класс гирлянды для создания эффекта анимации\r\n    garland.className = `garland ${garlandClasses[currentIndex]}`;\r\n  }, 300);\r\n}\r\n\r\n// Вызываем функцию garlandInit для инициализации эффекта гирлянды\r\ngarlandInit();","const burger = document.querySelector('.burger');\r\nconst navigation = document.querySelector('.navigation');\r\n\r\nburger.addEventListener('click', () => {\r\n  burger.classList.toggle('burger_active');\r\n  navigation.classList.toggle('hidden-mobile');\r\n});","/**\r\n * Скрипт управляет модальными окнами для консультации и заказа деревьев на странице\r\n * \r\n * @constant {NodeListOf<Element>} buttonsOrder - Список всех кнопок заказа деревьев\r\n * @constant {HTMLElement} buttonConsultation - Элемент кнопки \"Консультация\"\r\n * @constant {HTMLElement} overlayConsultation - Элемент \"overlay\" модального окна консультации\r\n * @constant {HTMLElement} overlayOrder - Элемент \"overlay\" модального окна заказа\r\n * @constant {HTMLElement} order - Элемент модального окна для ввода заказа\r\n */\r\n\r\n// Получение элементов со страницы\r\nconst buttonsOrder = document.querySelectorAll('.tree-card_button-order');\r\nconst buttonConsultation = document.querySelector('.button__consultation');\r\nconst overlayConsultation = document.querySelector('.overlay-consultation');\r\nconst overlayOrder = document.querySelector('.overlay-order');\r\nconst order = document.querySelector('.modal__order');\r\nconst consultation = document.querySelector('.modal__consultation');\r\n\r\n// Обработчик события клика на кнопку \"Консультация\"\r\n/**\r\n * Отображает модальное окно консультации при клике на кнопку \"Консультация\"\r\n */\r\nbuttonConsultation.addEventListener('click', () => {\r\n  overlayConsultation.classList.add('overlay-active');\r\n  consultation.value  = buttonConsultation.dataset.consultation;\r\n});\r\n\r\n// Обработчик события клика на overlay модального окна консультации\r\n/**\r\n * Закрывает модальное окно консультации при клике на overlay или на кнопку закрытия\r\n * \r\n * @param {Event} event - Объект события клика\r\n */\r\noverlayConsultation.addEventListener('click', event => {\r\n  const target =  event.target;\r\n\r\n  if (target === overlayConsultation || target.closest('.modal__close')) {\r\n    overlayConsultation.classList.remove('overlay-active');\r\n  }  \r\n})\r\n\r\n// Обработчики событий для кнопок заказа деревьев\r\n/**\r\n * Отображает модальное окно заказа с информацией о заказе при клике на кнопку заказа деревьев\r\n */\r\nbuttonsOrder.forEach(buttonOrder => {\r\n  buttonOrder.addEventListener('click', () => {\r\n    overlayOrder.classList.add('overlay-active');\r\n    order.value = buttonOrder.dataset.order;\r\n  });\r\n})\r\n\r\n// Обработчик события клика на overlay модального окна заказа\r\n/**\r\n * Закрывает модальное окно заказа при клике на overlay или на кнопку закрытия\r\n * \r\n * @param {Event} event - Объект события клика\r\n */\r\noverlayOrder.addEventListener('click', event => {\r\n  const target =  event.target;\r\n\r\n  if (target === overlayOrder || target.closest('.modal__close')) {\r\n    overlayOrder.classList.remove('overlay-active');\r\n  }  \r\n})","\r\n/**\r\n * Преобразует число и выбирает правильное склонение слова для него в соответствии с переданным массивом форм слова\r\n *\r\n * @param {number} n - Число, для которого нужно выбрать склонение\r\n * @param {string[]} titles - Массив форм слова для различных чисел (например, ['день', 'дня', 'дней'])\r\n * @param {boolean} [from] - Флаг, указывающий на особое правило выбора формы слова (необязательный параметр)\r\n * @returns {string} - Строка с числом и выбранным склонением слова\r\n */\r\nconst declOfNum = (n, titles, from) => n + ' ' + titles[from ? n % 10 === 1 && n % 100 !== 11 ?\r\n  1 : 2 : n % 10 === 1 && n % 100 !== 11 ? 0 :\r\n  n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2];\r\n\r\n/**\r\n * Отображает таймер обратного отсчета до указанного времени.\r\n */\r\nconst timers = () => {\r\n\r\n  // Создание элементов таймера\r\n  const timer = document.createElement('div');\r\n  const timerText = document.createElement('p');\r\n  const timerCount = document.createElement('span');\r\n\r\n  // Добавление классов к элементам\r\n  timer.classList.add('timer');\r\n  timerText.classList.add('timer__text');\r\n  timerCount.classList.add('timer__count');\r\n\r\n  // Задание текстового содержимого элементов\r\n  timerText.textContent = 'До конца распродажи осталось:';\r\n  timerCount.textContent = '3 дня 0 часов 15 минут 17 секунд';\r\n\r\n  // Структурирование элементов\r\n  timerText.append(timerCount);\r\n  timer.append(timerText);\r\n  document.body.prepend(timer);\r\n\r\n  /**\r\n   * Запускает таймер обратного отсчета до заданного времени.\r\n   */\r\n  const startTimer = () => {\r\n    const deadLine = new Date(2025, 0, 1, 0, 0, 0);\r\n    const now = new Date();\r\n    const timeRemaining = (deadLine - now) / 1000;\r\n\r\n    // Вычисление оставшегося времени в днях, часах, минутах и секундах\r\n    const seconds = Math.floor(timeRemaining % 60);\r\n    const minutes = Math.floor(timeRemaining / 60 % 60);\r\n    const hours = Math.floor(timeRemaining / 60 / 60 % 24);\r\n    const days = Math.floor(timeRemaining / 60 / 60 / 24);\r\n\r\n    // Выбор правильного склонения для каждой единицы времени\r\n    const s = declOfNum(seconds, ['секунда', 'секунды', 'секунд'])\r\n    const m = declOfNum(minutes, ['минута', 'минуты', 'минут'])\r\n    const h = declOfNum(hours, ['час', 'часа', 'часов'])\r\n    const d = declOfNum(days, ['день', 'дня', 'дней'])\r\n\r\n    // Обновление отображаемого времени\r\n    timerCount.textContent = `${d} ${h} ${m} ${s}`\r\n\r\n    // Повторный запуск таймера через 1 секунду\r\n    if (timeRemaining > 0) {\r\n      setTimeout(startTimer, 1000);\r\n    } else {\r\n      timer.remove();\r\n    }\r\n  }\r\n  \r\n  // Запуск таймера\r\n  startTimer();\r\n}\r\n\r\n// Вызов функции для отображения таймера\r\ntimers();","/**\r\n * Генерирует случайное целое число включительно в заданном диапазоне\r\n * @param {number} n - Минимальное значение диапазона\r\n * @param {number} m - Максимальное значение диапазона\r\n * @returns {number} - Случайное целое число включительно в заданном диапазоне\r\n */\r\nconst getRandomIntInclusive = (n, m) => {\r\n  const min = Math.min(n, m);\r\n  const max = Math.max(n, m);\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\n/**\r\n * Создает анимацию \"снегопада\" на странице\r\n * @param {number} min - Минимальная длительность анимации снежинки (в секундах)\r\n * @param {number} max - Максимальная длительность анимации снежинки (в секундах)\r\n * @param {number} saturation - Интервал между появлением снежинок (в миллисекундах)\r\n */\r\nconst createSnow = (min, max, saturation) => {\r\n  const style = document.createElement('style');\r\n  document.head.append(style);\r\n\r\n  style.textContent = `\r\n    body {\r\n      position: relative;\r\n    }\r\n    \r\n    .snow {\r\n      position: fixed;\r\n      width: 20px;\r\n      height: 20px;\r\n      top: -20px;\r\n      background-repeat: no-repeat;\r\n      background-position: center;\r\n      pointer-events: none;\r\n      animation-name: fall;\r\n      animation-timing-function: linear;\r\n    }\r\n\r\n    @keyframes fall {\r\n      100% { \r\n        transform: translateY(100vh);\r\n      }\r\n    }\r\n  `;\r\n\r\n  // Количество доступных снежинок \r\n  const count = 4;\r\n  \r\n  /**\r\n   * Создает и добавляет на страницу элемент снежинки\r\n  */\r\n  const createSnowItem = () => {\r\n    const snowItem  = document.createElement('div');\r\n    snowItem.classList.add('snow');\r\n\r\n    const time = getRandomIntInclusive(min, max);\r\n\r\n    // Установка случайного положение снежинки по горизонтали и фонового изображения\r\n    snowItem.style.cssText = `\r\n      left: ${getRandomIntInclusive(0, 100)}%;\r\n      background-image: url('./snow/snowflake${getRandomIntInclusive(1, count)}.svg');\r\n      animation-duration: ${time}s;\r\n    `;\r\n\r\n    // Добавление снежинки на страницу\r\n    document.body.append(snowItem);\r\n    \r\n    // Удаление снежинки после завершения анимации\r\n    setTimeout(() => {\r\n      snowItem.remove();\r\n    }, time * 1000);\r\n  }\r\n\r\n  // Запуск создания снежинок с интервалом saturation (в миллисекундах)\r\n  setInterval(createSnowItem, saturation);\r\n};\r\n\r\n// Инициализация эффекта снегопада\r\ncreateSnow(5, 20, 500);"]}